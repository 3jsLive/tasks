/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Content: peg$parseContent },
      peg$startRuleFunction  = peg$parseContent,

      peg$c0 = function(text) { return { type: "Text", text: text, location: locationAdjusted() } },
      peg$c1 = function(tag) { return { ...tag, source:text() } },
      peg$c2 = /^[a-zA-Z0-9_]/,
      peg$c3 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
      peg$c4 = /^[a-zA-Z0-9_.]/,
      peg$c5 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "."], false, false),
      peg$c6 = " ",
      peg$c7 = peg$literalExpectation(" ", false),
      peg$c8 = /^[ \t]/,
      peg$c9 = peg$classExpectation([" ", "\t"], false, false),
      peg$c10 = /^[ \t\r\n]/,
      peg$c11 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),
      peg$c12 = "[",
      peg$c13 = peg$literalExpectation("[", false),
      peg$c14 = "]",
      peg$c15 = peg$literalExpectation("]", false),
      peg$c16 = "(",
      peg$c17 = peg$literalExpectation("(", false),
      peg$c18 = ")",
      peg$c19 = peg$literalExpectation(")", false),
      peg$c20 = ":",
      peg$c21 = peg$literalExpectation(":", false),
      peg$c22 = ",",
      peg$c23 = peg$literalExpectation(",", false),
      peg$c24 = ", ...",
      peg$c25 = peg$literalExpectation(", ...", false),
      peg$c26 = "name",
      peg$c27 = peg$literalExpectation("name", true),
      peg$c28 = "path",
      peg$c29 = peg$literalExpectation("path", true),
      peg$c30 = "example",
      peg$c31 = peg$literalExpectation("example", true),
      peg$c32 = "page",
      peg$c33 = peg$literalExpectation("page", true),
      peg$c34 = "property",
      peg$c35 = peg$literalExpectation("property", true),
      peg$c36 = "method",
      peg$c37 = peg$literalExpectation("method", true),
      peg$c38 = "link",
      peg$c39 = peg$literalExpectation("link", true),
      peg$c40 = "member",
      peg$c41 = peg$literalExpectation("member", true),
      peg$c42 = "param",
      peg$c43 = peg$literalExpectation("param", true),
      peg$c44 = ".js",
      peg$c45 = peg$literalExpectation(".js", false),
      peg$c46 = function(link) {

      	return { type: 'ExampleTag', link:link, title:link, location: locationAdjusted() }

      },
      peg$c47 = /^[:\/\-]/,
      peg$c48 = peg$classExpectation([":", "/", "-"], false, false),
      peg$c49 = function(link, title) {

      	return { type: 'ExampleTag', link:link, title:normalizeWS( title ), location: locationAdjusted() }

      },
      peg$c50 = function(url) {

      	return { type: 'LinkTag', url:url.join(""), location: locationAdjusted() }

      },
      peg$c51 = function(url, text) {

      	return { type: 'LinkTag', url:url, text:normalizeWS( text ), location: locationAdjusted() }

      },
      peg$c52 = /^[:\/\-()#=]/,
      peg$c53 = peg$classExpectation([":", "/", "-", "(", ")", "#", "="], false, false),
      peg$c54 = function() {
      	return { type: 'PathTag', location: locationAdjusted() }
      },
      peg$c55 = function(name) {

      	const match = name.match( /^(\w+)\.(.*?)$/i );

          let main, anchor, extra;
          if ( match !== null ) {
          	main = match[ 1 ];
              anchor = match[ 2 ];
      		extra = { name:main };
          } else if ( name.startsWith( '.' ) === true ) {
              anchor = name.replace( /^\./, '' );
      		extra = {};
          } else {
          	main = name;
      		anchor = '';
      		extra = { name:main };
          }

      	return { type: 'PageTag', anchor:anchor, text:name, location: locationAdjusted(), ...extra };

      },
      peg$c56 = ".",
      peg$c57 = peg$literalExpectation(".", false),
      peg$c58 = function(anchor, text) {

      	return { type: 'PageTag', name:documentName, anchor:anchor.replace( /^\./, '' ), text:normalizeWS( text ), location: locationAdjusted() }

      },
      peg$c59 = function(name, text) {

      	const match = name.match( /^(\w+)\.(.*?)$/i );

          let main, anchor;
          if ( match !== null ) {
          	main = match[ 1 ];
              anchor = match[ 2 ];
          } else {
          	main = name;
      		anchor = '';
          }

      	return { type: 'PageTag', name:main, anchor:anchor, text:normalizeWS( text ), location: locationAdjusted() }

      },
      peg$c60 = function(retval) {

      	return { type: 'ParamTag', retval:retval, location: locationAdjusted() }

      },
      peg$c61 = function(retval, name) {

      	return { type: 'ParamTag', retval:retval, name:normalizeWS( name ), location: locationAdjusted() }

      },
      peg$c62 = function(tag, name) {

          return { type: tag[0].toUpperCase() + tag.slice(1) + 'Tag', name:name, retval:name, location: locationAdjusted() }

      },
      peg$c63 = function(tag, retval, name, params) {

          if ( params !== null )
              params = params.filter( x => x !== "(" && x !== ")" )[ 0 ];

          return { type: tag[0].toUpperCase() + tag.slice(1) + 'Tag', retval:retval, name:normalizeWS( name ), params:params, location: locationAdjusted() }

      },
      peg$c64 = function(tag) {

      	return tag

      },
      peg$c65 = function(tag) {

      	return { type: 'ParamTag', retval:undefined, name:tag, location: locationAdjusted() }

      },
      peg$c66 = function() {

      	return { type: 'NameTag', location: locationAdjusted() }

      },
      peg$c67 = function(params) {

          if ( params !== null )
              params = params.filter( x => x !== "(" && x !== ")" )[ 0 ];

      	return { type: 'Constructor', params:params, location: locationAdjusted() }

      },
      peg$c68 = "<",
      peg$c69 = peg$literalExpectation("<", false),
      peg$c70 = ">",
      peg$c71 = peg$literalExpectation(">", false),
      peg$c72 = "/",
      peg$c73 = peg$literalExpectation("/", false),
      peg$c74 = "code",
      peg$c75 = peg$literalExpectation("code", true),
      peg$c76 = /^[^<]/,
      peg$c77 = peg$classExpectation(["<"], true, false),
      peg$c78 = /^[^>]/,
      peg$c79 = peg$classExpectation([">"], true, false),
      peg$c80 = /^[^\]]/,
      peg$c81 = peg$classExpectation(["]"], true, false),
      peg$c82 = /^[^[<]/,
      peg$c83 = peg$classExpectation(["[", "<"], true, false),
      peg$c84 = /^[^\/]/,
      peg$c85 = peg$classExpectation(["/"], true, false),
      peg$c86 = peg$anyExpectation(),
      peg$c87 = function(code) {

      	return { type: "CodeTag", code, location: locationAdjusted() };

      },
      peg$c88 = function(tag) {

      	return { type: "NonCodeTag", tag };

      },
      peg$c89 = function(tag) {

      	return { type: "NonBracketsTag", tag };

      },
      peg$c90 = function(text) {

      	return { type: "Text", text, location: locationAdjusted() };

      },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseContent() {
    var s0, s1, s2, s3, s4;

    s0 = [];
    s1 = peg$parseTags();
    if (s1 === peg$FAILED) {
      s1 = peg$parseCodeTag();
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseNonCodeTag();
      if (s4 === peg$FAILED) {
        s4 = peg$parseNonBracketsTag();
        if (s4 === peg$FAILED) {
          s4 = peg$parseText();
        }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseNonCodeTag();
          if (s4 === peg$FAILED) {
            s4 = peg$parseNonBracketsTag();
            if (s4 === peg$FAILED) {
              s4 = peg$parseText();
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c0(s2);
      }
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseTags();
        if (s1 === peg$FAILED) {
          s1 = peg$parseCodeTag();
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseNonCodeTag();
          if (s4 === peg$FAILED) {
            s4 = peg$parseNonBracketsTag();
            if (s4 === peg$FAILED) {
              s4 = peg$parseText();
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseNonCodeTag();
              if (s4 === peg$FAILED) {
                s4 = peg$parseNonBracketsTag();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseText();
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c0(s2);
          }
          s1 = s2;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTags() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseNameTag();
    if (s1 === peg$FAILED) {
      s1 = peg$parseConstructor();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePathTag();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePageTag();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLinkTag();
            if (s1 === peg$FAILED) {
              s1 = peg$parseMPMTag();
              if (s1 === peg$FAILED) {
                s1 = peg$parseExampleTag();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseParamTag();
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRxW() {
    var s0;

    if (peg$c2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }

    return s0;
  }

  function peg$parseRxWDot() {
    var s0;

    if (peg$c4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }

    return s0;
  }

  function peg$parseSP() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }

    return s0;
  }

  function peg$parseWS() {
    var s0;

    if (peg$c8.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }

    return s0;
  }

  function peg$parseWSLB() {
    var s0;

    if (peg$c10.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }

    return s0;
  }

  function peg$parseOPB() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 91) {
      s0 = peg$c12;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }

    return s0;
  }

  function peg$parseCLB() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c14;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }

    return s0;
  }

  function peg$parseOPP() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c16;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parseCLP() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c18;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parseCOLON() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c20;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parseCOMMADOTS() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parseLBLName() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c26) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parseLBLPath() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c28) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }

    return s0;
  }

  function peg$parseLBLExample() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c30) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }

    return s0;
  }

  function peg$parseLBLPage() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c32) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }

    return s0;
  }

  function peg$parseLBLProperty() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c34) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }

    return s0;
  }

  function peg$parseLBLMethod() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c36) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }

    return s0;
  }

  function peg$parseLBLLink() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c38) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }

    return s0;
  }

  function peg$parseLBLMember() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parseLBLParam() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c42) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }

    return s0;
  }

  function peg$parseTAGName() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLB();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTAGPath() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLPath();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLB();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTARTExample() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLExample();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTARTPage() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLPage();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTARTProperty() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLProperty();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTARTMethod() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLMethod();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTARTLink() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLLink();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTARTParam() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLParam();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseENDJavascript() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }

    return s0;
  }

  function peg$parseLABELS() {
    var s0;

    s0 = peg$parseLBLExample();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLBLPage();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLBLProperty();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLBLMethod();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLBLLink();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLBLParam();
              if (s0 === peg$FAILED) {
                s0 = peg$parseLBLName();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseLBLPath();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLABELSneedingCOLON() {
    var s0;

    s0 = peg$parseLBLExample();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLBLPage();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLBLProperty();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLBLMethod();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLBLLink();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLBLParam();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLABELSneedingnoCOLON() {
    var s0;

    s0 = peg$parseLBLPath();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLBLName();
    }

    return s0;
  }

  function peg$parseExampleTagShort() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSTARTExample();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseRxW();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseRxW();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLB();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c46(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExampleTagLong() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSTARTExample();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseRxW();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseRxW();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSP();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseRxWDot();
          if (s6 === peg$FAILED) {
            if (peg$c47.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s6 === peg$FAILED) {
              s6 = peg$parseWS();
            }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseRxWDot();
              if (s6 === peg$FAILED) {
                if (peg$c47.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c48); }
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$parseWS();
                }
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLB();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c49(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExampleTag() {
    var s0;

    s0 = peg$parseExampleTagLong();
    if (s0 === peg$FAILED) {
      s0 = peg$parseExampleTagShort();
    }

    return s0;
  }

  function peg$parseLinkTagShort() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSTARTLink();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLinkTagUrlShort();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLB();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLinkTagLong() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseSTARTLink();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseLinkTagUrlFull();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseTAGPath();
        if (s5 === peg$FAILED) {
          s5 = peg$parseTAGName();
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseENDJavascript();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseLinkTagUrlFull();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseLinkTagUrlFull();
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSP();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parseRxWDot();
          if (s7 === peg$FAILED) {
            if (peg$c47.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s7 === peg$FAILED) {
              s7 = peg$parseWS();
            }
          }
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseRxWDot();
              if (s7 === peg$FAILED) {
                if (peg$c47.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c48); }
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$parseWS();
                }
              }
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseTAGPath();
            if (s7 === peg$FAILED) {
              s7 = peg$parseTAGName();
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseENDJavascript();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parseRxWDot();
                if (s10 === peg$FAILED) {
                  if (peg$c47.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                  if (s10 === peg$FAILED) {
                    s10 = peg$parseWS();
                  }
                }
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseRxWDot();
                  if (s10 === peg$FAILED) {
                    if (peg$c47.test(input.charAt(peg$currPos))) {
                      s10 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s10 === peg$FAILED) {
                      s10 = peg$parseWS();
                    }
                  }
                }
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLB();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLinkTag() {
    var s0;

    s0 = peg$parseLinkTagShort();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLinkTagLong();
    }

    return s0;
  }

  function peg$parseLinkTagUrlShort() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseRxWDot();
    if (s1 === peg$FAILED) {
      if (peg$c47.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseRxWDot();
        if (s1 === peg$FAILED) {
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLinkTagUrlFull() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseRxWDot();
    if (s1 === peg$FAILED) {
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseRxWDot();
        if (s1 === peg$FAILED) {
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePathTag() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTAGPath();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c54();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePageShort() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSTARTPage();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseRxWDot();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseRxWDot();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLB();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c55(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePageAnchor() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSTARTPage();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c56;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseRxWDot();
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseRxWDot();
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSP();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseRxWDot();
          if (s6 === peg$FAILED) {
            s6 = peg$parseWSLB();
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseRxWDot();
              if (s6 === peg$FAILED) {
                s6 = peg$parseWSLB();
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLB();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c58(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePageLong() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSTARTPage();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseRxWDot();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseRxWDot();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSP();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseRxWDot();
          if (s6 === peg$FAILED) {
            s6 = peg$parseWSLB();
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseRxWDot();
              if (s6 === peg$FAILED) {
                s6 = peg$parseWSLB();
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLB();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePageTag() {
    var s0;

    s0 = peg$parsePageShort();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePageAnchor();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePageLong();
      }
    }

    return s0;
  }

  function peg$parseParamTag() {
    var s0;

    s0 = peg$parseParamTagLong();
    if (s0 === peg$FAILED) {
      s0 = peg$parseParamTagShort();
    }

    return s0;
  }

  function peg$parseParamTagShort() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSTARTParam();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseRxW();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseRxW();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLB();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParamTagLong() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSTARTParam();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseRxWDot();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseRxWDot();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSP();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseRxWDot();
          if (s6 === peg$FAILED) {
            s6 = peg$parseWS();
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseRxWDot();
              if (s6 === peg$FAILED) {
                s6 = peg$parseWS();
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLB();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c61(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMPMTag() {
    var s0;

    s0 = peg$parseMPMTagLong();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMPMTagShort();
    }

    return s0;
  }

  function peg$parseMPMTagShort() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLMember();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLBLProperty();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLBLMethod();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseRxW();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseRxW();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLB();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c62(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMPMTagLong() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseOPB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLMember();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLBLProperty();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLBLMethod();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseRxW();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseRxW();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSP();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parseRxWDot();
              if (s8 === peg$FAILED) {
                s8 = peg$parseWS();
              }
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseRxWDot();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseWS();
                  }
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = input.substring(s6, peg$currPos);
              } else {
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCLB();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseWS();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseWS();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseOPP();
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$parseParamTagInList();
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parseParamTagInList();
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseCLP();
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c63(s2, s4, s6, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParamTagInList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWSLB();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWSLB();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseParamTag();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLinkTagLong();
        if (s2 === peg$FAILED) {
          s2 = peg$parseFakeParamTag();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOMMADOTS();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCOMMA();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseWSLB();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseWSLB();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c64(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFakeParamTag() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseRxWDot();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseRxWDot();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c65(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNameTag() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseTAGName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSLB();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWSLB();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseOPP();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConstructor() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseTAGName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSLB();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWSLB();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseOPP();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseParamTagInList();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseParamTagInList();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseCLP();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c67(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHTMLStart() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c68;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }

    return s0;
  }

  function peg$parseHTMLEnd() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c70;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c71); }
    }

    return s0;
  }

  function peg$parseHTMLClose() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 47) {
      s0 = peg$c72;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }

    return s0;
  }

  function peg$parseNotHTMLClose() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c72;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLBLCode() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c74) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c75); }
    }

    return s0;
  }

  function peg$parseTAGCodeStart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseHTMLStart();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBLCode();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHTMLEnd();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTAGCodeEnd() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseHTMLStart();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHTMLClose();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLBLCode();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseHTMLEnd();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRxNotStartHTML() {
    var s0;

    if (peg$c76.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }

    return s0;
  }

  function peg$parseRxNotEndHTML() {
    var s0;

    if (peg$c78.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }

    return s0;
  }

  function peg$parseRxNotCLB() {
    var s0;

    if (peg$c80.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }

    return s0;
  }

  function peg$parseRxNotOPBorStartHTML() {
    var s0;

    if (peg$c82.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }

    return s0;
  }

  function peg$parseRxNoHTMLClose() {
    var s0;

    if (peg$c84.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }

    return s0;
  }

  function peg$parseRxSingleBracketNoClose() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseHTMLStart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseRxNoHTMLClose();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseRxNoHTMLClose();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseWS();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseWS();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCodeTag() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseTAGCodeStart();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseTAGCodeEnd();
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = void 0;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseTAGCodeEnd();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTAGCodeEnd();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c87(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNonCodeTag() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWS();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWS();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSLB();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWSLB();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parseHTMLStart();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseHTMLClose();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$parseLBLCode();
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = void 0;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseRxNotEndHTML();
              if (s9 !== peg$FAILED) {
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseRxNotEndHTML();
                }
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseHTMLEnd();
                if (s9 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8, s9];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseWS();
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseWSLB();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseWSLB();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c88(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNonBracketsTag() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWS();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWS();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWSLB();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWSLB();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parseOPB();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          s8 = peg$parseLABELSneedingCOLON();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseCOLON();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$parseLABELSneedingnoCOLON();
          }
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = void 0;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseRxNotCLB();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseRxNotCLB();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseCLB();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseWS();
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseWSLB();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseWSLB();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c89(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseText() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseRxNotOPBorStartHTML();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseRxNotOPBorStartHTML();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c90(s1);
    }
    s0 = s1;

    return s0;
  }



      const documentName = '<documentName>';

      function normalizeWS( text ) {

          return text.replace( /[ \t\r\n]+/g, ' ' );

      }
      
      function locationAdjusted() {
      
      	const loc = location();
          
          loc.start.column --;
          loc.end.column --;
          
          return loc;
      	
      }



  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
